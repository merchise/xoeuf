---
stages:
  - pre-check
  - check
  - test
  - build
  - publish
  - clean up

.x-when-releasing: &when-releasing
  refs:
    - tags
  variables:
    - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(a\d+|b\d+|rc\d+)?(\.post\d+)?$/


.x-chaging-doc-or-code: &changing-code-or-doc
  changes:
    - .gitlab-ci.yml
    - 'docs/themes/**/*'
    - docs/**/*.py
    - docs/**/*.rst
    - tests/**/*.py
    - xoeuf/**/*.py
    - setup.py
    - setup.cfg
    - pyproject.toml

.x-when-updating-code: &when-updating-code
  refs:
    - main
    - merge_requests
  changes:
    - .gitlab-ci.yml
    - tests/**/*.py
    - xoeuf/**/*.py
    - setup.py
    - setup.cfg
    - pyproject.toml


check code smells (with Bugbear and Python 3.8):
  interruptible: true
  image: python:3.8-alpine
  stage: check
  script:
    - |
      apk add git
      pip install 'flake8-bugbear~=20.1' 'xoutil~=2.1' merchise.lint>=0.16 git+https://github.com/pycqa/pyflakes@4ed1ba41d1406dbb6c9ffbd369c2f523c2dc48f3
      merchise_lint
  only:
    <<: *when-updating-code

check formatting with black:
  interruptible: true
  image: python:3.8
  stage: check
  script:
    - pip install 'black==22.3.0'
    - black --check xoeuf/
  only:
    <<: *when-updating-code

.run_tests: &run_tests
  interruptible: true
  needs:
    - check code smells (with Bugbear and Python 3.8)
    - check formatting with black
  image: python:${PYTHON_VERSION}
  services:
    - name: "registry.merchise.org/provision/pg-testing:postgis-10-3.2-alpine"
      alias: "postgres"
  stage: test
  script:
    - |
      apt-get update && apt-get install -y build-essential \
           libxslt1-dev libxml2-dev libsasl2-dev \
           libjpeg-dev zlib1g-dev libldap2-dev libfreetype6-dev \
           libyaml-dev libgeos-dev libusb-dev \
           libssl-dev postgresql-client
      mkdir -p vendor
      cd vendor
      if [ "$CI_SERVER_HOST" = "gitlab.merchise.org" ]; then
          git clone -b merchise-develop-${ODOO_VERSION}.0 --depth=1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.merchise.org/merchise/odoo.git
      else
          git clone -b merchise-develop-${ODOO_VERSION}.0 --depth=1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/merchise-autrement/odoo.git
      fi
      cd odoo
      pip install -U wheel setuptools==53.1.0
      pip install "futures<3"
      pip install -r requirements.txt
      pip install -U "six>=1.9.0" "decorator>=4.0,<4.2" "hypothesis>=6,<6.38" "celery~=5.0"
      pip install -e .
      cd ../../
      pip install -e .
      export ADDONS=`ls tests/ | grep ^test_ | xargs | tr " " ","`
      cd vendor/odoo
      ../../runtests-odoo.sh -i $ADDONS --db_host=$POSTGRES_HOST --db_password=$POSTGRES_PASSWORD --db_user=$POSTGRES_USER
  only:
    <<: *when-updating-code

run all tests:
  <<: *run_tests
  variables:
    POSTGRES_USER: xoeuf
    POSTGRES_PASSWORD: xoeuf
    POSTGRES_HOST: postgres
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]
        ODOO_VERSION: "12"

build distributions:
  image: python:3.8-alpine
  stage: build
  script:
    - apk add git
    - rm -f dist/*
    - python setup.py sdist
    - python setup.py bdist_wheel
  artifacts:
    paths:
      - dist/
  only:
    <<: *when-releasing


publish pypi:
  image: python:3.8
  stage: publish
  script:
    - pip install twine
    - twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  only:
    <<: *when-releasing
  needs:
    - build distributions
  environment:
    name: pypi
    url: https://pypi.org/project/$CI_PROJECT_NAME


.x-build-doc: &with-build-documentation
  interruptible: true
  image: python:3.8
  variables:
    PYTHON_VERSION: "3.8"
    ODOO_VERSION: "12"
  stage: build
  script:
    - |
      set -x
      apt-get update && apt-get install -y build-essential \
           libxslt1-dev libxml2-dev libsasl2-dev \
           libjpeg-dev zlib1g-dev libldap2-dev libfreetype6-dev \
           libyaml-dev libgeos-dev libusb-dev \
           libssl-dev postgresql-client
      mkdir -p vendor
      cd vendor
      if [ "$CI_SERVER_HOST" = "gitlab.merchise.org" ]; then
          git clone -b merchise-develop-${ODOO_VERSION}.0 --depth=1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.merchise.org/merchise/odoo.git
      else
          git clone -b merchise-develop-${ODOO_VERSION}.0 --depth=1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/merchise-autrement/odoo.git
      fi
      cd odoo
      pip install -U wheel setuptools==53.1.0
      pip install "futures<3"
      pip install -r requirements.txt
      pip install -U "six>=1.9.0" "decorator>=4.0,<4.2" "hypothesis>=6,<6.38"
      pip install -e .
      cd ../../
      pip install -e .
      pip install 'Sphinx>=4.4.0,<5.0'
      make -C docs/ html
  artifacts:
    paths:
      - docs/build/html
    expire_in: 4 days


build documentation:
  <<: *with-build-documentation
  needs: []
  only:
    <<: *changing-code-or-doc
    refs:
      - main
      - tags
      - merge_request


publish in our rtd:
  interruptible: true
  image: alpine
  variables:
    GIT_STRATEGY: none
  stage: publish
  script:
    - |
      apk add openssh rsync
      mkdir -p $HOME/.ssh
      chmod 700 $HOME/.ssh
      cp $RSA_KEY_FILE $HOME/.ssh/id_rsa
      chmod 600 $HOME/.ssh/id_rsa
      cp $SSH_CONFIG_FILE $HOME/.ssh/config
      ssh docs.lahavane.com mkdir -p /data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA
      rsync -auvp -e ssh ./docs/build/html/ docs.lahavane.com:/data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA/
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; rm -r $CI_COMMIT_REF_NAME; ln -s .$CI_COMMIT_SHA $CI_COMMIT_REF_NAME"
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; ls -al | grep -oE '\.([0-9]|[a-z])*$' | sort | uniq -c | grep '1 ' | grep -oE '\.([0-9]|[a-z])*$' | xargs rm -rf"
  needs:
    - build documentation
  environment:
    name: docs.lahavane.com
    url: http://docs.lahavane.com/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME
  only:
    <<: *changing-code-or-doc
    refs:
      - main
      - tags
      - merge_request
    variables:
      - $CI_SERVER_HOST == "gitlab.merchise.org"

pages:
  interruptible: true
  image: alpine
  variables:
    GIT_STRATEGY: none
  stage: publish
  needs:
    - build documentation
  script:
    - |
      mkdir -p public
      cp -rf docs/build/html/* public/
  artifacts:
    paths:
      - public
  only:
    <<: *changing-code-or-doc
    refs:
      - main


automatically remove MR documentation from our RTD server after 4 hours:
  stage: clean up
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_SERVER_HOST == "gitlab.merchise.org"'
      when: on_success
    - when: never
  trigger:
    include: ci/cleanup.yml
